// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum field that allows for a single selection and not multiple as in []
enum UserType {
  requester_reporter
  support_organization
}

enum Gender {
  male
  female
  mixed
}

enum OrgSize {
  size_5_10
  size_10_20
  size_20_50
  size_50_plus
}

enum WhoIsReporting {
  self
  parent_guardian
  spouse
  witness
  others
}

enum Location {
  victim_home
  perpetrator_home
  neutral_location
  school
  workspace
  online
  others
}

enum CaseStatus {
  pending
  in_discussion
  resolved
  closed
}

enum AssignmentStatus {
  pending // available for any org to take
  accepted // locked by an org
  rejected // org declined â†’ can be reopened
}

enum AgeRange {
  less_than_18
  from_18_to_25
  from_26_to_35
  from_36_to_45
  above_45
}

enum EmploymentStatus {
  employed
  unemployed
  self_employed
}

enum NoOfAssailants {
  less_than_2
  from_2_5
  from_5_10
  over_10
}

enum MaritalStatus {
  single
  married
  separated
  divorced
}

// User field for used for user authentication common for both client(requester/reporter) and support organization
// ===================USRER MODEL===================
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  phone     String   @unique
  password  String
  userType  UserType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  requesterReporterProfile RequesterReporterProfile?
  supportOrgProfile        SupportOrgProfile?
  passwordReset            PasswordReset?

  //Relation to child model/tables
  refreshSessions RefreshSession[] //  one-to-many relation

  @@index([userType])
  @@index([email])
}

// ======================PROFILE MODELS=======================
model RequesterReporterProfile {
  id             String    @id @default(uuid())
  fullName       String
  gender         Gender?
  dateOfBirth    DateTime?
  occupation     String?
  profilePicture String?

  userId String @unique

  // Relationt to child model/table
  cases           CaseDetails[] // A profile can report multiple cases
  serviceRequests ServiceRequests[] // A profile can request multiple services

  // Relation to parent model/table
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([fullName])
}

model SupportOrgProfile {
  id               String    @id @default(uuid())
  organizationName String
  customSector     String? // Accepts data when the other field is field not available in the sector list
  dateEstablished  DateTime?
  organizationSize OrgSize?
  address          String?
  alternatePhone   String?
  organizationLogo String?

  userId String @unique

  // Child modles
  sectors            SupportOrgSector[] // An organization can have multiple sectors of operation
  CaseAssignments    CaseAssignment[] // An organization can be assigned more than one case report
  ServiceAssignments ServiceAssignment[] // An organization can accept more than one service request
  // Relation to parent table/model
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([organizationName])
  @@index([customSector])
}

// ======================SUPPORT ORGANIZATION SECTOR MODEL=======================

// A junction table/model that stores lists of sectors an organization operates in during registration
// An organization can operate in multiple sectors
model SupportOrgSector {
  id             String @id @default(uuid())
  sectorId       String
  organizationId String

  // Relation to models associated with sectors
  organization SupportOrgProfile @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  sector       Sector            @relation(fields: [sectorId], references: [id])

  @@unique([sectorId, organizationId]) // Ensure a sector is not duplicated for the same organization
  @@index([sectorId])
  @@index([organizationId])
}

// ======================REFRESH SESSION MODEL=======================
model RefreshSession {
  id           String   @id @default(uuid())
  userId       String
  refreshToken String
  userAgent    String?
  ipAddress    String?
  createdAt    DateTime @default(now())
  expiresAt    DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, expiresAt]) // Needed to fetch sessions per user quickly
  @@index([expiresAt])
}

// ====================================================CASE REPORT MODELS==========================================================
model CaseDetails {
  id                         String  @id @default(uuid())
  requesterReporterProfileId String?
  caseTypeId                 String

  whoIsReporting WhoIsReporting
  location       Location?
  description    String         @db.VarChar(200)
  infoConfirmed  Boolean        @default(false)
  caseStatus     CaseStatus     @default(pending)

  // Relations with child models/tables
  victimDetails    VictimDetails?
  assailantDetails AssailantDetails?
  caseAssignments  CaseAssignment[]

  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  deletedAt                DateTime?
  // Relations to parent models/tables
  requesterReporterProfile RequesterReporterProfile? @relation(fields: [requesterReporterProfileId], references: [id], onDelete: SetNull)
  caseType                 CaseType                  @relation(fields: [caseTypeId], references: [id])

  @@index([requesterReporterProfileId])
  @@index([caseTypeId])
  @@index([caseStatus])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([deletedAt])
}

model VictimDetails {
  id                    String  @id @default(uuid())
  caseId                String  @unique
  vulnerabilityStatusId String?

  ageRange         AgeRange
  employmentStatus EmploymentStatus
  gender           Gender

  // Relation to parent models
  cases               CaseDetails          @relation(fields: [caseId], references: [id], onDelete: Cascade)
  vulnerabilityStatus VulnerabilityStatus? @relation(fields: [vulnerabilityStatusId], references: [id])

  @@index([vulnerabilityStatusId])
  @@index([caseId])
}

model AssailantDetails {
  id     String @id @default(uuid())
  caseId String @unique

  noOfAssailants NoOfAssailants
  gender         Gender
  ageRange       AgeRange

  // Relation to parent models
  cases CaseDetails @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@index([caseId])
}

// ==========================SERVICE REQUEST MODELS===========================
model ServiceRequests {
  id                         String  @id @default(uuid())
  requesterReporterProfileId String?

  whoNeedsThisService WhoIsReporting
  ageRange            AgeRange?
  phone               String?
  email               String?
  infoConfirmed       Boolean
  caseStatus          CaseStatus     @default(pending)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relation to child models/tables
  serviceDetails     ServiceDetails?
  serviceAssignments ServiceAssignment[]

  // Relation to parent models/tables
  requesterReporterProfile RequesterReporterProfile? @relation(fields: [requesterReporterProfileId], references: [id], onDelete: SetNull)

  @@index([requesterReporterProfileId])
  @@index([caseStatus])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([deletedAt])
}

model ServiceDetails {
  id                    String  @id @default(uuid())
  serviceRequestId      String  @unique
  serviceTypeId         String
  vulnerabilityStatusId String?

  maritalStatus MaritalStatus
  workStatus    EmploymentStatus

  description String @db.VarChar(200)

  // Relation to parent model/tables
  serviceRequests     ServiceRequests      @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
  serviceType         ServiceType          @relation(fields: [serviceTypeId], references: [id])
  vulnerabilityStatus VulnerabilityStatus? @relation(fields: [vulnerabilityStatusId], references: [id])

  @@index([serviceTypeId])
}

// Enums stored as models/tables for scalabiity

// This sector model is a dictionary model/table that stores all the sectors available for support organizations to choose from
model Sector {
  id   String @id @default(uuid())
  name String @unique

  // Relation to other models requiring sectors (support organization sector)
  organizations     SupportOrgSector[]
  CaseTypeSector    CaseTypeSector[]
  ServiceTypeSector ServiceTypeSector[]
}

model ServiceType {
  id   String @id @default(uuid())
  name String @unique

  // Relation to models/table requiring service type
  serviceDetails    ServiceDetails[]
  ServiceTypeSector ServiceTypeSector[]
}

/**
 * - Service request can be submitted to more than one organization
 * - Service request can be associatated with more than one sector
 * - A join table that connects the sector and typeOfService
 */

model ServiceTypeSector {
  id            String      @id @default(uuid())
  serviceTypeId String
  sectorId      String
  serviceType   ServiceType @relation(fields: [serviceTypeId], references: [id], onDelete: Cascade)
  sector        Sector      @relation(fields: [sectorId], references: [id], onDelete: Cascade)

  @@unique([serviceTypeId, sectorId])
  @@index([serviceTypeId])
  @@index([sectorId])
}

// ================== SERVICE ASSIGNMENT ==================
model ServiceAssignment {
  id             String           @id @default(uuid())
  serviceId      String
  organizationId String?
  status         AssignmentStatus @default(pending)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // Relations
  service      ServiceRequests    @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  organization SupportOrgProfile? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([serviceId, organizationId]) // prevent duplicates
  @@index([serviceId, status])
  @@index([organizationId])
  @@index([status])
}

model CaseType {
  id   String @id @default(uuid())
  name String @unique

  // Relations to modele/tables requiring casetype models
  cases          CaseDetails[]
  CaseTypeSector CaseTypeSector[]
}

/**
 * -- A case report can be submitted to more than one organization
 * -- A case report can be associated with more than one sector
 * -- A join table that connects the sector table and type of case
 */
model CaseTypeSector {
  id         String   @id @default(uuid())
  caseTypeId String
  sectorId   String
  caseType   CaseType @relation(fields: [caseTypeId], references: [id], onDelete: Cascade)
  sector     Sector   @relation(fields: [sectorId], references: [id], onDelete: Cascade)

  @@unique([caseTypeId, sectorId])
  @@index([caseTypeId])
  @@index([sectorId])
}

// ================== CASE ASSIGNMENT ==================
model CaseAssignment {
  id             String           @id @default(uuid())
  caseId         String
  organizationId String?
  status         AssignmentStatus @default(pending)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // Relations
  case         CaseDetails        @relation(fields: [caseId], references: [id], onDelete: Cascade)
  organization SupportOrgProfile? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([caseId, organizationId]) // prevent duplicates
  @@index([caseId, status])
  @@index([organizationId])
  @@index([status])
}

model VulnerabilityStatus {
  id   String @id @default(uuid())
  name String @unique

  // Relation to models/table requiring vulnerability status
  serviceDetails ServiceDetails[]
  victimsDetails VictimDetails[]
}

model PasswordReset {
  id        String   @id @default(uuid())
  userId    String   @unique
  token     String   @unique // Harshed token is to be stored
  createdAt DateTime @default(now())
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@index([createdAt])
}
